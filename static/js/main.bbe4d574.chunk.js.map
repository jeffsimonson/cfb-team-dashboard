{"version":3,"sources":["css/Roster.module.css","css/Recruits.module.css","css/TeamPicker.module.css","css/Standings.module.css","css/Games.module.css","css/dashboard.module.css","css/InfoBox.module.css","css/App.module.css","components/TeamPicker.jsx","components/YearPicker.jsx","components/InfoBox.jsx","collegeFootballAPI.jsx","components/School.jsx","components/Standings.jsx","components/Games.jsx","commonFunctions.jsx","components/Roster.jsx","components/Recruits.jsx","components/Dashboard.jsx","App.jsx","serviceWorker.jsx","index.jsx"],"names":["module","exports","TeamPicker","handleTeamChange","Teams","SelectedYear","Venues","FormControl","variant","className","styles","Select","defaultValue","onChange","e","target","value","map","Team","i","key","school","YearPicker","handleYearChange","currentYear","Date","getFullYear","optionYears","computedYear","push","Key","InfoBox","props","infoBox","children","fetchCollegeFootballData","fetchType","queryString","a","axios","get","res","data","console","log","School","SelectedTeam","TeamVenue","useState","fetchedCoach","setFetchedCoach","useEffect","fetchAPI","coachFullName","first_name","last_name","venueCapacity","capacity","toLocaleString","mascot","conference","division","city","state","name","year_constructed","Standings","fetchedStandings","setFetchedStandings","filteredByConference","filter","standings","sort","team1","team2","total","wins","Styles","team","losses","Games","fetchedGames","setFetchedGames","style","textAlign","games","game","gameDateJSON","gameDate","getMonth","getDate","getFormattedDate","start_date","home_team","away_team","teamResult","home_points","away_points","winLoss","formatHeight","inches","parseInt","formatHometown","country","fullHomeTown","Roster","fetchedRoster","setFetchedRoster","activeRoster","roster","player1","player2","jersey","container","stickyHeader","player","position","height","weight","year","home_city","home_state","home_country","Recruits","fetchedRecruits","setFetchedRecruits","sortedRecruits","recruit1","recruit2","rating","recruit","stars","stateProvince","Dashboard","teamBackgroundColor","backgroundColor","alt_color","teamLogo","logos","dashboard","src","alt","APP","bind","ShowDashboard","fetchedTeams","fetchedVenues","this","setState","teamVenue","teamVenueID","venue_id","find","venue","id","teamsArray","fetchedTeam","fetchTeamVenue","fetchedTeamVenue","venues","dashBoardMarkup","selectionArea","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bbe4d574.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Roster_container__3CjdF\",\"Roster\":\"Roster_Roster__2OqKU\",\"stickyHeader\":\"Roster_stickyHeader__pKJIt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Recruits\":\"Recruits_Recruits__2Zovc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"TeamPicker_formControl__HercN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"standings\":\"Standings_standings__mX4rR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"games\":\"Games_games__slCyi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"dashboard_dashboard__2fQ74\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoBox\":\"InfoBox_infoBox__29D31\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectionArea\":\"App_selectionArea__3Ugnz\",\"image\":\"App_image__1HaYf\",\"container\":\"App_container__1VbOG\"};","import React from \"react\";\r\nimport { Select, FormControl } from \"@material-ui/core\";\r\n\r\nimport styles from \"../css/TeamPicker.module.css\";\r\n\r\nconst TeamPicker = ({ handleTeamChange, Teams = [], SelectedYear, Venues }) => {\r\n\r\n  return (\r\n    <FormControl variant=\"outlined\" className={styles.FormControl}>\r\n      <Select\r\n        defaultValue=\"Choose Team\"\r\n        onChange={(e) => handleTeamChange(e.target.value, Teams, SelectedYear, Venues)}\r\n      >\r\n        <option value=\"Choose Team\">Choose Team</option>\r\n        {Teams.map((Team, i) => (\r\n          <option key={i} value={Team.school}>\r\n            {Team.school}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default TeamPicker;\r\n","import React from \"react\";\r\n\r\nimport { Select, FormControl } from \"@material-ui/core\";\r\nimport styles from \"../css/TeamPicker.module.css\";\r\n\r\nconst YearPicker = ({ handleYearChange, Team, Venues }) => {\r\n  let currentYear = new Date().getFullYear();\r\n  let optionYears = [];\r\n  let computedYear = 0;\r\n\r\n  for (let i = 0; i < 15; i++) {\r\n    computedYear = currentYear - i;\r\n    optionYears.push(\r\n      <option Key={i} value={computedYear}>\r\n        {computedYear}\r\n      </option>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <FormControl variant=\"outlined\" className={styles.FormControl}>\r\n      <Select\r\n        defaultValue={currentYear}\r\n        onChange={(e) => handleYearChange(e.target.value, Team, Venues)}\r\n      >\r\n        {optionYears}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default YearPicker;\r\n","import React from \"react\";\r\nimport styles from \"../css/InfoBox.module.css\";\r\n\r\nconst InfoBox = (props) => {\r\n  return <section className={styles.infoBox}>{props.children}</section>;\r\n};\r\n\r\nexport default InfoBox;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://api.collegefootballdata.com\";\r\n\r\nexport const fetchCollegeFootballData= async (fetchType, queryString) => {\r\n  try {\r\n\r\n    const res = await axios.get(`${url}${queryString}`);\r\n\r\n    return res.data;\r\n\r\n  } catch (error) {\r\n    console.log(`Fetch${fetchType} Error`);\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { fetchCollegeFootballData } from \"../collegeFootballAPI\";\r\n\r\nconst School = ({ SelectedTeam, SelectedYear, TeamVenue }) => {\r\n  const [fetchedCoach, setFetchedCoach] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCoach(await fetchCollegeFootballData(\"Coach\",`/coaches?team=${SelectedTeam.school}&year=${SelectedYear}`));\r\n    };\r\n    fetchAPI();\r\n  }, [SelectedTeam, SelectedYear]);\r\n\r\n  let coachFullName = \"\";\r\n\r\n  if (fetchedCoach[0]) {\r\n    coachFullName = fetchedCoach[0].first_name + \" \" + fetchedCoach[0].last_name;\r\n  };\r\n\r\n  let venueCapacity = \"\";\r\n\r\n  if (TeamVenue.capacity) {\r\n    venueCapacity = TeamVenue.capacity.toLocaleString();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2>Team Information</h2>\r\n      <table>\r\n        <tr>\r\n          <td>School:</td>\r\n          <td>{SelectedTeam.school}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Mascot:</td>\r\n          <td>{SelectedTeam.mascot}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Conference:</td>\r\n          <td>{SelectedTeam.conference}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Division:</td>\r\n          <td>{SelectedTeam.division}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Coach:</td>\r\n          <td>{coachFullName}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>City:</td>\r\n          <td>{TeamVenue.city}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>State:</td>\r\n          <td>{TeamVenue.state}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Venue:</td>\r\n          <td>{TeamVenue.name}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>Capacity:</td>\r\n          <td>{venueCapacity}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>Constructed:</td>\r\n          <td>{TeamVenue.year_constructed}</td>\r\n        </tr>\r\n\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default School;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Styles from \"../css/Standings.module.css\";\r\n\r\nimport { fetchCollegeFootballData } from \"../collegeFootballAPI\";\r\n\r\nconst Standings = ({ SelectedTeam, SelectedYear }) => {\r\n  const [fetchedStandings, setFetchedStandings] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedStandings(await fetchCollegeFootballData(\"Standings\", `/records?year=${SelectedYear}`));\r\n    };\r\n    fetchAPI();\r\n  }, [SelectedTeam, SelectedYear]);\r\n\r\n  let filteredByConference = [];\r\n\r\n  filteredByConference = fetchedStandings\r\n  .filter(standings => standings.conference ===  SelectedTeam.conference)\r\n  .sort((team1, team2) => team2.total.wins - team1.total.wins);\r\n\r\n  return (\r\n  <>\r\n  <h2>Conference Standings</h2>\r\n    <table className={Styles.standings}>\r\n    <caption className={Styles.standings}>{SelectedYear} Results</caption>\r\n\r\n      <tr>\r\n        <th>Team</th> \r\n        <th>Wins</th> \r\n        <th>Losses</th> \r\n      </tr>\r\n    {filteredByConference.map(team => \r\n      <tr>\r\n        <td>{team.team}</td>\r\n        <td>{team.total.wins}</td>\r\n        <td>{team.total.losses}</td>\r\n      </tr>\r\n    )}\r\n\r\n    </table>\r\n\r\n</>\r\n  );\r\n\r\n};\r\n\r\nexport default Standings;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Styles from \"../css/Games.module.css\";\r\n\r\nimport { fetchCollegeFootballData } from \"../collegeFootballAPI\";\r\n\r\nconst Games = ({ SelectedTeam, SelectedYear }) => {\r\n  const [fetchedGames, setFetchedGames] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedGames(\r\n        await fetchCollegeFootballData(\r\n          \"Games\",\r\n          `/games?year=${SelectedYear}&team=${SelectedTeam.school}`\r\n        )\r\n      );\r\n    };\r\n    fetchAPI();\r\n  }, [SelectedTeam, SelectedYear]);\r\n\r\n  function getFormattedDate(gameDateJSON) {\r\n    const gameDate = new Date(gameDateJSON);\r\n    const month = gameDate.getMonth() + 1;\r\n    const day = gameDate.getDate();\r\n    const year = gameDate.getFullYear();\r\n    return month + \"/\" + day + \"/\" + year;\r\n  }\r\n\r\n  function winLoss(game, Team) {\r\n    let teamResult = \"\";\r\n\r\n    if (game.home_points === game.away_points) return teamResult; // for unplayed game\r\n\r\n    if (game.home_team === Team) {\r\n      if (game.home_points > game.away_points) {\r\n        teamResult = \"W\";\r\n      } else {\r\n        teamResult = \"L\";\r\n      }\r\n    } else {\r\n      if (game.away_points > game.home_points) {\r\n        teamResult = \"W\";\r\n      } else {\r\n        teamResult = \"L\";\r\n      }\r\n    }\r\n    return teamResult;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2 style={{ textAlign: \"center\" }}>Schedule/Results</h2>\r\n      <table className={Styles.games}>\r\n        <caption className={Styles.games}>\r\n          {SelectedYear} Regular Season Results\r\n        </caption>\r\n\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Opponent</th>\r\n          <th>W/L</th>\r\n          <th>Pts</th>\r\n          <th>Opp Pts</th>\r\n        </tr>\r\n        {fetchedGames.map((game) => (\r\n          <tr>\r\n            <td>{getFormattedDate(game.start_date)}</td>\r\n            <td>\r\n              {game.home_team === SelectedTeam.school\r\n                ? game.away_team\r\n                : \"@ \" + game.home_team}\r\n            </td>\r\n            <td>{winLoss(game, SelectedTeam.school)}</td>\r\n            <td>\r\n              {game.home_team === SelectedTeam.school\r\n                ? game.home_points\r\n                : game.away_points}\r\n            </td>\r\n            <td>\r\n              {game.home_team !== SelectedTeam.school\r\n                ? game.home_points\r\n                : game.away_points}\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Games;\r\n","export const formatHeight = (inches) => {\r\n    const feet = parseInt(inches / 12);\r\n    const extraInches = inches % 12;\r\n    return feet + \"'\" + extraInches + '\"';\r\n  }\r\n\r\n\r\nexport const formatHometown = (city, state, country) => {\r\n    if (city === null) city = \"\";\r\n    if (state === null) state = \"\";\r\n    if (country === null) country =\"USA\";\r\n\r\n    let fullHomeTown = city + \", \" + state;\r\n    if (country !== \"USA\" ) {\r\n      fullHomeTown = fullHomeTown + \", \" + country;\r\n    }\r\n    return fullHomeTown;\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Styles from \"../css/Roster.module.css\";\r\nimport { fetchCollegeFootballData } from \"../collegeFootballAPI\";\r\nimport {formatHeight, formatHometown } from \"../commonFunctions\";\r\n\r\n    \r\nconst Roster = ({ SelectedTeam, SelectedYear }) => {\r\n  const [fetchedRoster, setFetchedRoster] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedRoster(await fetchCollegeFootballData(\"Roster\", `/roster?team=${SelectedTeam.school}&year=${SelectedYear}`))\r\n    };\r\n    fetchAPI();\r\n  }, [SelectedTeam, SelectedYear]);\r\n\r\n    \r\n    let activeRoster = [];\r\n\r\n    activeRoster = fetchedRoster\r\n    .filter(roster => roster.last_name !==  null)\r\n    .sort((player1, player2) => player1.jersey  - player2.jersey || player1.last_name - player2.last_name);\r\n\r\n    return ( \r\n   \r\n      <section className={Styles.container}>\r\n        <h2 className={Styles.Roster}>Player Roster</h2>\r\n        <table className={Styles.Roster}>\r\n          <caption className={Styles.Roster} >{SelectedYear} Team</caption>\r\n      \r\n            <tr>\r\n              <th className={Styles.stickyHeader}>Nbr</th> \r\n              <th className={Styles.stickyHeader}>Player</th> \r\n              <th className={Styles.stickyHeader}>Pos</th> \r\n              <th className={Styles.stickyHeader}>Height</th> \r\n              <th className={Styles.stickyHeader}>Weight</th> \r\n              <th className={Styles.stickyHeader}>Year</th> \r\n              <th className={Styles.stickyHeader}>Hometown</th> \r\n            </tr>\r\n          {activeRoster.map(player => \r\n            <tr>\r\n              <td>{player.jersey}</td>\r\n              <td>{player.first_name +  \" \" + player.last_name}</td>\r\n              <td>{player.position}</td>\r\n              <td>{formatHeight(player.height)}</td>\r\n              <td>{player.weight}</td>\r\n              <td>{player.year}</td>\r\n              <td>{formatHometown(player.home_city, player.home_state, player.home_country)}</td>\r\n            </tr>\r\n          )}\r\n      \r\n        </table>\r\n      </section>\r\n\r\n     );\r\n}\r\n \r\nexport default Roster;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Styles from \"../css/Recruits.module.css\";\r\nimport { fetchCollegeFootballData } from \"../collegeFootballAPI\";\r\nimport {formatHeight, formatHometown } from \"../commonFunctions\";\r\n    \r\nconst Recruits = ({ SelectedTeam, SelectedYear }) => {\r\n  const [fetchedRecruits, setFetchedRecruits] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedRecruits(await fetchCollegeFootballData(\"Recruits\", `/recruiting/players?year=${SelectedYear}&team=${SelectedTeam.school}`));\r\n    };\r\n    fetchAPI();\r\n  }, [SelectedTeam, SelectedYear]);\r\n\r\n    \r\n    const sortedRecruits = fetchedRecruits\r\n    .sort((recruit1, recruit2) => recruit2.rating  - recruit1.rating);\r\n\r\n    return ( \r\n\r\n      <section className={Styles.container}>\r\n          <h2 className={Styles.Recruits}>Recruiting Class</h2>\r\n          <table className={Styles.Recruits}>\r\n          <caption className={Styles.Recruits}>{SelectedYear} Recruits</caption>\r\n      \r\n            <tr>\r\n              <th>Name</th> \r\n              <th>Pos</th> \r\n              <th>Stars</th> \r\n              <th>Rating</th> \r\n              <th>Height</th> \r\n              <th>Weight</th> \r\n              <th>School</th> \r\n              <th>Hometown</th> \r\n            </tr>\r\n          {sortedRecruits.map(recruit => \r\n            <tr>\r\n              <td>{recruit.name}</td>\r\n              <td>{recruit.position}</td>\r\n              <td>{recruit.stars}</td>\r\n              <td>{recruit.rating}</td>\r\n              <td>{formatHeight(recruit.height)}</td>\r\n              <td>{recruit.weight}</td>\r\n              <td>{recruit.school}</td>\r\n              <td>{formatHometown(recruit.city, recruit.stateProvince, recruit.country)}</td>\r\n            </tr>\r\n          )}\r\n       \r\n          </table>\r\n      </section>\r\n\r\n     );\r\n}\r\n \r\nexport default Recruits;","import React from \"react\";\r\n\r\nimport styles from \"../css/dashboard.module.css\";\r\nimport InfoBox from \"../components/InfoBox\";\r\nimport School from \"../components/School\";\r\nimport Standings from \"../components/Standings\";\r\nimport Games from \"../components/Games\";\r\nimport Roster from \"../components/Roster\";\r\nimport Recruits from \"../components/Recruits\";\r\n\r\nconst Dashboard = ({ SelectedTeam, SelectedYear, TeamVenue }) => {\r\n  const teamBackgroundColor = {\r\n    backgroundColor: `${SelectedTeam.alt_color}`,\r\n  };\r\n\r\n  let teamLogo = [];\r\n\r\n  if (SelectedTeam.logos) {\r\n    teamLogo = SelectedTeam.logos[0];\r\n  }\r\n\r\n  return (\r\n    <section className={styles.dashboard} style={teamBackgroundColor}>\r\n      <img src={teamLogo} alt=\"team logo\" />\r\n\r\n      <InfoBox>\r\n        <School SelectedTeam={SelectedTeam} SelectedYear={SelectedYear} TeamVenue={TeamVenue} />\r\n      </InfoBox>\r\n\r\n      <InfoBox>\r\n        <Games SelectedTeam={SelectedTeam} SelectedYear={SelectedYear} />\r\n      </InfoBox>\r\n      \r\n      <InfoBox>\r\n        <Standings SelectedTeam={SelectedTeam} SelectedYear={SelectedYear} />\r\n      </InfoBox>\r\n\r\n\r\n      <InfoBox>\r\n        <Roster SelectedTeam={SelectedTeam} SelectedYear={SelectedYear} />\r\n      </InfoBox>\r\n\r\n      <InfoBox>\r\n        <Recruits SelectedTeam={SelectedTeam} SelectedYear={SelectedYear} />\r\n      </InfoBox>\r\n\r\n\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\n\nimport TeamPicker from \"./components/TeamPicker\";\nimport YearPicker from \"./components/YearPicker\";\nimport Dashboard from \"./components/Dashboard\";\nimport styles from \"./css/App.module.css\";\nimport { fetchCollegeFootballData} from \"./collegeFootballAPI\";\n\nclass APP extends React.Component {\n\n  handleTeamChange = this.handleTeamChange.bind(this);\n  handleYearChange = this.handleYearChange.bind(this);\n \n  state = {\n    Teams: [],\n    Venues: [],\n    TeamVenue: {},\n    SelectedTeam: {},\n    SelectedYear: new Date().getFullYear(),\n    ShowDashboard: false,\n  };\n\n  async componentDidMount() {\n    const fetchedTeams = await fetchCollegeFootballData(\"Teams\", \"/teams/fbs\");\n    const fetchedVenues = await fetchCollegeFootballData(\"Venues\", \"/venues\");\n    this.setState({ Teams: fetchedTeams, Venues: fetchedVenues});\n  }\n\n      \n  async fetchTeamVenue(team, year, Venues)  {\n    const currentYear = new Date().getFullYear();\n    \n    if (year === currentYear) {\n      year = year - 1;\n    };\n\n    const res = await fetchCollegeFootballData(\"TeamVenue\", `/games?year=${year}&home=${team}`);\n    \n    let teamVenue = {};\n    if (res[0]) {\n      const teamVenueID = res[0].venue_id;\n      teamVenue = Venues.find(venue => venue.id === teamVenueID)\n    }\n\n    return teamVenue;\n  };\n\n  async handleTeamChange (team, teamsArray, SelectedYear, Venues)  {\n    const fetchedTeam = await teamsArray.find(({ school }) => school === team);\n    const fetchedTeamVenue = await this.fetchTeamVenue(fetchedTeam.school, SelectedYear, Venues);\n    this.setState({ SelectedTeam: fetchedTeam, TeamVenue:fetchedTeamVenue,  ShowDashboard: true });\n  };\n\n  async handleYearChange (year, team, venues)  {\n    const fetchedTeamVenue = await this.fetchTeamVenue(team, year, venues);\n    this.setState({ SelectedYear: year, TeamVenue:fetchedTeamVenue, ShowDashboard: true });\n  };\n\n  render() {\n\n    let dashBoardMarkup = \"\";\n\n    if (this.state.ShowDashboard) {\n      dashBoardMarkup = (\n        <Dashboard\n          SelectedTeam={this.state.SelectedTeam}\n          SelectedYear={this.state.SelectedYear}\n          TeamVenue={this.state.TeamVenue}\n        />\n      );\n    }\n\n    return (\n      <>\n        <section>\n          <h1>College Football Team Dashboard</h1>\n          <div className={styles.selectionArea}>\n            <TeamPicker\n              handleTeamChange={this.handleTeamChange}\n              Teams={this.state.Teams}\n              SelectedYear={this.state.SelectedYear}\n              Venues={this.state.Venues}\n            />\n\n            <YearPicker \n              handleYearChange={this.handleYearChange} \n              Team={this.state.SelectedTeam.school} \n              Venues={this.state.Venues} />\n          </div>\n        </section>\n\n        <section>{dashBoardMarkup}</section>\n      </>\n    );\n  }\n}\n\nexport default APP;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}